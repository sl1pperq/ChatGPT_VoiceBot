from datetime import datetime
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import openai
import uuid
import speech_recognition as sp
import torch

openai.api_key = 'OPENAI-TOKEN'
bot = telebot.TeleBot("TELEGRAM-TOKEN")

messages = [
    {
        "role": "system",
        "content": "You are a intelligent assistant."
    }
]

def GPT(message):
    if message:
        messages.append(
            {"role": "user", "content": message},
        )
        chat = openai.ChatCompletion.create(
            model="gpt-3.5-turbo", messages=messages
        )
    reply = chat.choices[0].message.content
    return reply


def MARKUP():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("üëç", callback_data=f"like"), InlineKeyboardButton("üëé", callback_data=f"dislike"))
    return markup

@bot.message_handler(commands=['anek', 'joke'])
def gpt_write_anek(ms):
    bot.send_message(ms.chat.id, '–ü—Ä–∏–¥—É–º—ã–≤–∞—é –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π –∞–Ω–µ–∫–¥–æ—Ç...')
    bot.send_chat_action(ms.chat.id, action='typing')
    reply = GPT('–†–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ –æ–¥–Ω—É —à—É—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å–∫–æ—Ä–±–∏—Ç. –¢–æ–ª—å–∫–æ —à—É—Ç–∫—É, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤.')
    bot.delete_message(ms.chat.id, ms.message_id + 1)
    bot.send_message(ms.chat.id, f'{reply}')
    messages.append({"role": "assistant", "content": reply})


@bot.message_handler(commands=['fact', 'interesting'])
def gpt_write_anek(ms):
    bot.send_message(ms.chat.id, '–£–∂–µ –≤ –ø–æ–∏—Å–∫–∞—Ö —Å–∞–º–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞...')
    bot.send_chat_action(ms.chat.id, action='typing')
    reply = GPT('–†–∞—Å—Å–∫–∞–∂–∏ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Ç–æ—Ä–æ–º —è –Ω–µ –∑–Ω–∞–ª –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤')
    bot.delete_message(ms.chat.id, ms.message_id + 1)
    bot.send_message(ms.chat.id, f'{reply}')
    messages.append({"role": "assistant", "content": reply})


@bot.callback_query_handler(func=lambda call: True)
def answer_to_feed(call):
    if call == 'like':
        bot.answer_callback_query(call.id, '–†–∞–¥, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!')
    elif call == 'dislike':
        bot.answer_callback_query(call.id, '–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!')


@bot.message_handler(content_types=['text'])
def gpt_main_question(ms):
    message = ms.text
    bot.send_message(ms.chat.id, '–Ø —É–∂–µ –¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...')
    bot.send_chat_action(ms.chat.id, action='typing')
    reply = GPT(message)
    bot.delete_message(ms.chat.id, ms.message_id + 1)
    bot.send_message(ms.chat.id, f'{reply}', reply_markup=MARKUP())
    messages.append({"role": "assistant", "content": reply})


@bot.message_handler(content_types=['audio', 'voice'])
def gpt_voice_question(ms):
    device = torch.device('cpu')
    sample_rate = 48000
    language = 'ru'
    model_id = 'v3_1_ru'
    file_info = bot.get_file(ms.voice.file_id)
    down_file = bot.download_file(file_info.file_path)
    path = str(uuid.uuid4())
    with open(path + '.oga', 'wb') as file:
        file.write(down_file)
    convert_audio(path + '.oga')
    voice = sp.Recognizer()
    with sp.WavFile(path + '.oga.wav') as source:
        audio = voice.record(source)
        at = voice.recognize_google(audio, language='ru-RU')
        reply = GPT(at)
        messages.append({"role": "assistant", "content": reply})
        model, example_text = torch.hub.load(repo_or_dir='snakers4/silero-models', model='silero_tts', language=language, speaker=model_id)
        model.to(device)
        text = f'{reply}'
        audio = model.save_wav(text=text, speaker='baya', sample_rate=sample_rate, audio_path="audio.wav")
        with open('audio.wav', 'rb') as file:
            bot.send_voice(ms.chat.id, file)

def convert_audio(path):
    import subprocess
    src_filename = path
    dest_filename = path + '.wav'
    subprocess.run(['ffmpeg', '-i', src_filename, dest_filename])
    return dest_filename

bot.polling()
